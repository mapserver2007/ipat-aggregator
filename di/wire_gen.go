// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/mapserver2007/ipat-aggregator/app/domain/service"
	"github.com/mapserver2007/ipat-aggregator/app/infrastructure"
	"github.com/mapserver2007/ipat-aggregator/app/usecase/data_cache_usecase"
	"github.com/mapserver2007/ipat-aggregator/app/usecase/list_usecase"
)

// Injectors from wire.go:

func InitializeDataCacheUseCase() *data_cache_usecase.DataCacheUseCase {
	racingNumberDataRepository := infrastructure.NewRacingNumberDataRepository()
	raceDataRepository := infrastructure.NewRaceDataRepository()
	jockeyDataRepository := infrastructure.NewJockeyDataRepository()
	raceIdDataRepository := infrastructure.NewRaceIdDataRepository()
	markerDataRepository := infrastructure.NewMarkerDataRepository()
	raceConverter := service.NewRaceConverter()
	ticketConverter := service.NewTicketConverter(raceConverter)
	netKeibaService := service.NewNetKeibaService(raceConverter, ticketConverter)
	racingNumberEntityConverter := service.NewRacingNumberEntityConverter()
	raceEntityConverter := service.NewRaceEntityConverter()
	jockeyEntityConverter := service.NewJockeyEntityConverter()
	dataCacheUseCase := data_cache_usecase.NewDataCacheUseCase(racingNumberDataRepository, raceDataRepository, jockeyDataRepository, raceIdDataRepository, markerDataRepository, netKeibaService, raceConverter, racingNumberEntityConverter, raceEntityConverter, jockeyEntityConverter)
	return dataCacheUseCase
}

func InitializeListUseCase() *list_usecase.ListUseCase {
	raceConverter := service.NewRaceConverter()
	ticketConverter := service.NewTicketConverter(raceConverter)
	raceEntityConverter := service.NewRaceEntityConverter()
	listService := service.NewListService(raceConverter, ticketConverter, raceEntityConverter)
	listUseCase := list_usecase.NewListUseCase(listService)
	return listUseCase
}
